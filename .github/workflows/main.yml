name: Solana MEV Bot Auto-Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-validate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install requests pytest

    - name: Deploy Jupiter integration modules
      run: |
        echo "ðŸš€ Writing core modules..."
        mkdir -p core data
        cat > core/jupiter_feed.py <<'PY'
import requests, time
from typing import Optional
API_BASE = "https://price.jup.ag/v4/price"
class JupiterFeed:
    def __init__(self, retry=3, backoff=0.5):
        self.retry, self.backoff = retry, backoff
    def get_price(self, symbol: str) -> Optional[float]:
        url = f"{API_BASE}?ids={symbol}"
        for _ in range(self.retry):
            try:
                r = requests.get(url, timeout=5)
                if r.status_code == 200:
                    data = r.json()
                    return float(data['data'][symbol]['price'])
            except Exception as e:
                print(f"[WARN] Jupiter price fetch failed for {symbol}: {e}")
            time.sleep(self.backoff)
        return None
if __name__ == "__main__":
    feed = JupiterFeed()
    symbols = ['SOL','USDC','WIF','BONK']
    prices = {s: feed.get_price(s) for s in symbols}
    print(prices)
PY

        cat > core/arbitrage_detector.py <<'PY'
from typing import Dict, List, Tuple
from core.jupiter_feed import JupiterFeed
THRESHOLD = 0.003
class ArbitrageDetector:
    def __init__(self): self.feed = JupiterFeed()
    def detect(self, pairs: List[Tuple[str,str]]) -> List[Dict]:
        results=[]
        for base, quote in pairs:
            p1,p2=self.feed.get_price(base),self.feed.get_price(quote)
            if not p1 or not p2: continue
            spread=abs(1-(p1/p2))
            if spread>=THRESHOLD:
                results.append({'pair':f'{base}/{quote}','spread_percent':round(spread*100,3),'price_base':p1,'price_quote':p2})
        return results
if __name__=="__main__":
    d=ArbitrageDetector()
    print(d.detect([('SOL','USDC'),('BONK','USDC'),('WIF','USDC')]))
PY

        cat > core/profit_logger.py <<'PY'
import json, os, time
LOG_PATH = os.path.expanduser('data/jupiter_opps.json')
class ProfitLogger:
    def __init__(self): os.makedirs(os.path.dirname(LOG_PATH), exist_ok=True)
    def record(self, data):
        all=[]
        if os.path.exists(LOG_PATH):
            with open(LOG_PATH) as f: all=json.load(f)
        all.append({"ts":time.time(),**data})
        with open(LOG_PATH,"w") as f: json.dump(all,f,indent=2)
        print("ðŸ’¾ Logged", data)
if __name__=="__main__":
    l=ProfitLogger()
    l.record({"pair":"SOL/USDC","spread_percent":0.31,"sim_profit":1.24})
PY

        cat > core/live_executor.py <<'PY'
from core.arbitrage_detector import ArbitrageDetector
from core.profit_logger import ProfitLogger
class LiveExecutor:
    def __init__(self):
        self.detector=ArbitrageDetector()
        self.logger=ProfitLogger()
    def run(self):
        pairs=[('SOL','USDC'),('BONK','USDC'),('WIF','USDC')]
        opps=self.detector.detect(pairs)
        for o in opps:
            o['sim_profit']=round(o['spread_percent']/100*100,2)
            self.logger.record(o)

